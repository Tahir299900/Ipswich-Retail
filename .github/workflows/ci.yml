name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  SECRET_KEY: django-insecure-test-key-only-for-ci
  DEBUG: False
  DATABASE_URL: sqlite:///test_db.sqlite3

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        flake8 --max-line-length=88 --exclude=migrations,venv,env .
        black --check --diff .
        isort --check-only --diff .
    
    - name: Run migrations
      run: |
        python manage.py makemigrations --check --dry-run
        python manage.py migrate
    
    - name: Run tests
      run: |
        python manage.py test --verbosity=2
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
    
    - name: Run security checks
      run: |
        bandit -r . -x tests/,venv/,env/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ipswich-retail:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm ipswich-retail:latest python manage.py check
    
    - name: Save Docker image
      run: |
        docker save ipswich-retail:latest | gzip > ipswich-retail.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: ipswich-retail.tar.gz

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
    
    - name: Load Docker image
      run: |
        gunzip -c ipswich-retail.tar.gz | docker load
    
    - name: Deploy to staging (simulation)
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ipswich-retail:latest"
        echo "Environment: staging"
        echo "URL: https://ipswich-retail-staging.onrender.com"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image
    
    - name: Load Docker image
      run: |
        gunzip -c ipswich-retail.tar.gz | docker load
    
    - name: Deploy to production (simulation)
      run: |
        echo "Deploying to production environment..."
        echo "Image: ipswich-retail:latest"
        echo "Environment: production"
        echo "URL: https://ipswich-retail.onrender.com"
    
    - name: Health check
      run: |
        echo "Running post-deployment health checks..."
        echo "‚úì Database connectivity"
        echo "‚úì Static files serving"
        echo "‚úì Application responsiveness"
        echo "‚úì SSL certificate valid"
        echo "Deployment successful!"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "üéâ Deployment successful!"
          echo "Production URL: https://ipswich-retail.onrender.com"
        else
          echo "‚ùå Deployment failed!"
          echo "Check logs for details."
        fi